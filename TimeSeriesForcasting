pip install yfinance
pip install  statsmodels 
pip install matplotlib
pip install tensorflow

import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import EarlyStopping
stock_data = yf.download('AAPL', start='2015-01-01', end='2023-01-01')
stock_data = stock_data[['Close']]

stock_data = stock_data.dropna()

scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(stock_data)

def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        a = data[i:(i + time_step), 0]
        X.append(a)
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

time_step = 100
X, y = create_dataset(scaled_data, time_step)

X = X.reshape(X.shape[0], X.shape[1], 1)

train_size = int(len(X) * 0.8)
test_size = len(X) - train_size
X_train, X_test = X[0:train_size], X[train_size:len(X)]
y_train, y_test = y[0:train_size], y[train_size:len(y)]

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')

early_stop = EarlyStopping(monitor='val_loss', patience=10)
model.fit(X_train, y_train, batch_size=1, epochs=10, validation_data=(X_test, y_test), callbacks=[early_stop])
train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)


plt.figure(figsize=(12, 6))
plt.plot(stock_data.index, stock_data['Close'], label='Original Data')
plt.plot(stock_data.index[time_step:time_step+len(train_predict)], train_predict, label='Train Predict')
plt.plot(stock_data.index[time_step+len(train_predict)+1:time_step+len(train_predict)+1+len(test_predict)], test_predict, label='Test Predict')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.title('Stock Price Prediction')
plt.legend()
plt.show()
